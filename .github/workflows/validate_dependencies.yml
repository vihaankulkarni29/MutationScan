name: Validate Git Dependencies

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    # Run daily at 2 AM UTC to catch upstream dependency issues
    - cron: '0 2 * * *'
  workflow_dispatch:

jobs:
  validate-dependencies:
    name: Validate Git-based Dependencies
    runs-on: ${{ matrix.os }}
    
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest]
        python-version: ['3.9', '3.10', '3.11', '3.12']
    
    steps:
      - name: Checkout MutationScan
        uses: actions/checkout@v4
      
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip setuptools wheel
      
      - name: Run dependency validation (file check only)
        run: |
          python subscan/validate_git_dependencies.py --no-install-test --verbose
        continue-on-error: false
      
      - name: Run full dependency validation (with pip install test)
        run: |
          python subscan/validate_git_dependencies.py --verbose
        continue-on-error: false
      
      - name: Test MutationScan installation
        run: |
          cd subscan
          pip install -e . --verbose
        continue-on-error: false
      
      - name: Verify imports
        run: |
          python -c "import federated_genome_extractor; print('federated_genome_extractor OK')"
          python -c "import subscan; print('subscan OK')"
        continue-on-error: false
      
      - name: Run structure validation
        run: |
          python subscan/tools/check_structure.py
        continue-on-error: false
      
      - name: Run dependency check
        run: |
          python subscan/tools/check_dependencies.py
        continue-on-error: false

  notify-on-failure:
    name: Notify on Dependency Failure
    runs-on: ubuntu-latest
    needs: validate-dependencies
    if: failure()
    
    steps:
      - name: Create Issue on Failure
        uses: actions/github-script@v7
        with:
          script: |
            const title = 'ðŸš¨ Git Dependency Validation Failed';
            const body = `
            ## Dependency Validation Failure
            
            The automated Git dependency validation has failed.
            
            **Workflow Run:** ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}
            **Triggered by:** ${{ github.event_name }}
            **Branch:** ${{ github.ref_name }}
            
            ### Possible Causes:
            - Missing \`pyproject.toml\` or \`setup.py\` in dependency repository
            - Missing \`__init__.py\` files
            - Dependency repository inaccessible
            - Pip install failure (circular dependencies, syntax errors, etc.)
            
            ### Action Required:
            1. Check the workflow logs above
            2. Run locally: \`python subscan/validate_git_dependencies.py --verbose\`
            3. Fix packaging issues in the failing dependency repository
            4. Verify with: \`pip install git+<repo-url>\`
            
            **Auto-generated by:** Git Dependency Validation Workflow
            `;
            
            // Check if issue already exists
            const issues = await github.rest.issues.listForRepo({
              owner: context.repo.owner,
              repo: context.repo.repo,
              state: 'open',
              labels: 'automated,dependencies,ci-failure'
            });
            
            const existingIssue = issues.data.find(issue => issue.title === title);
            
            if (!existingIssue) {
              await github.rest.issues.create({
                owner: context.repo.owner,
                repo: context.repo.repo,
                title: title,
                body: body,
                labels: ['automated', 'dependencies', 'ci-failure', 'high-priority']
              });
            } else {
              // Add comment to existing issue
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: existingIssue.number,
                body: `New failure detected: ${body}`
              });
            }
